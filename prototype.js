var app = {}; // Default base class

app.settings = {
    debug: true,
    feedbackTimer: 5 /* */
};

app.states = { READ: 0, EDIT: 1 }; // App states
app.viewState = { READ: 0, EDIT: 1 }; // View Modes - Controls when the control is visible
app.controlTypes = { CONTROL: 0, INPUT: 1 }; // Control types
app.feedbackMode = { DEFAULT: 0, ERROR: 1, OK: 2 }; // Feedback modes, used to display feedback to the end user
app.currentState = app.states.READ; // Default to read state
app.viewModeControls = [];
app.editableControls = [];

app.registerControl = function(type, control, viewState) {
    if (app.settings.debug) { console.log('Registering control') };

    type = isNaN(type) ? app.controlTypes[type] : type;
    viewState = isNaN(viewState) ? app.viewState[viewState] : viewState;

    if (!control.hasAttribute('id'))
        control.setAttribute('id', 'autogenerated_' + app.editableControls.length);

    if (type == app.controlTypes.CONTROL) {
        app.viewModeControls.push(
            {
                "control": control,
                "viewState": viewState
            }
        );
    }

    if (type == app.controlTypes.INPUT) {
        app.editableControls.push(
            {
                "control": control,
                "viewState": viewState
            }
        );
    }
}

app.setState = function(state) {
    app.currentState = state;
}

app.setControlMode = function() {

    app.viewModeControls.forEach(function(element) {
        if (element.viewState == app.currentState) {
            app.showControl(element.control);
        } else {
            app.hideControl(element.control);
        }
    });
}

app.changeEditMode = function(saveData) {

    app.editableControls.forEach(function(element) {

        var controlId = element.control.getAttribute("id");
        var controlType = element.control.getAttribute("data-type");
        var saveControl = document.getElementById(controlId + "_edit");

        if (app.currentState == app.viewState.READ) {
            if (saveData && saveControl) {
                if (controlType == "checkbox") {
                    element.control.setAttribute("data-state", (saveControl.checked == true ? "checked" : ""));
                } else if (controlType == "dropdown") {
                    element.control.innerHTML = saveControl.selectedOptions[0].text;
                } else {
                    element.control.innerHTML = saveControl.value;
                }
            }

            // Delete the input control (if any)
            if (saveControl) {
                if (controlType == "checkbox") {
                    saveControl.parentNode.parentNode.removeChild(saveControl.parentNode);
                } else {
                    saveControl.parentNode.removeChild(saveControl);
                }
            }

            // Show the original read-only control
            app.showControl(element.control);
        }

        if (app.currentState == app.viewState.EDIT) {

            var editControl = null;
            var editSubControl = null;
            var editTextNode = null;
            var editValueNode = null;
            var controlValues = element.control.hasAttribute("data-values") ? JSON.parse(element.control.getAttribute("data-values")) : "";

            // Create the edit controls
            if (controlType == "textbox") {
                editControl = document.createElement("input");
                editControl.id = controlId + "_edit";
                editControl.type = "text";
                editControl.className = "form-control";
                editControl.value = element.control.innerHTML;
            } else if (controlType == "dropdown") {
                editControl = document.createElement("select");
                editControl.id = controlId + "_edit";
                editControl.className = "form-control";

                if (controlValues.length > 0) {

                    controlValues.forEach(function(item) {

                        editTextNode = document.createElement("option");
                        editTextNode.value = item.value;

                        editValueNode = document.createTextNode(item.text);
                        editTextNode.appendChild(editValueNode);

                        editControl.appendChild(editTextNode);
                    });
                }

            } else if (controlType == "checkbox") {
                editControl = document.createElement("label");
                editControl.innerHTML = "&nbsp;" + element.control.innerHTML;
                editSubControl = document.createElement("input");
                editSubControl.type = "checkbox";
                editSubControl.id = controlId + "_edit";

                // Add checked state (based on data attribute 'data-state')
                if (element.control.hasAttribute("data-state") && element.control.getAttribute("data-state") === "checked") {
                    editSubControl.setAttribute("checked", true);
                }

                editControl.insertBefore(editSubControl, editControl.firstChild);
            }
            else {
                // Not supported
                if (app.settings.debug) { console.log("Unsupported edit element"); }
            }

            if (editControl) {
                // Add the edit control to the page
                element.control.parentNode.insertBefore(editControl, element.control);

                // Set text value to other control?
                if (element.control.hasAttribute("data-update-control-text")) {
                    editControl.addEventListener("change", function() {           
                        var targetControlID = element.control.getAttribute("data-update-control-text");
                        var targetControl = document.getElementById(targetControlID + "_edit") ? document.getElementById(targetControlID + "_edit") : document.getElementById(targetControlID);

                        if (element.control.getAttribute("data-type") == "dropdown") {
                            targetControl.value = this.selectedOptions[0].text;
                        } else {
                            targetControl.value = this.value;
                        }}, 
                        false);
                }
                
                if (element.control.hasAttribute("data-update-control-value")) {
                    editControl.addEventListener("change", function() {           
                        var targetControlID = element.control.getAttribute("data-update-control-value");
                        var targetControl = document.getElementById(targetControlID + "_edit") ? document.getElementById(targetControlID + "_edit") : document.getElementById(targetControlID);

                        if (element.control.getAttribute("data-type") == "dropdown") {
                            targetControl.value = this.selectedOptions[0].value;
                        } else {
                            targetControl.value = this.value;
                        }}, 
                        false);
                }
                
                // Hide the read-only control
                app.hideControl(element.control);
            }
        }
    });
}

app.createFeedbackDialog = function(title, message, feedbackMode, beforeElement) {

    // Handle support for feedback mode being passed as "DEFAULT, OK, ERROR" or their enum counter parts (0, 1, 2)
    feedbackMode = isNaN(feedbackMode) ? app.feedbackMode[feedbackMode] : feedbackMode;

    var feedbackClass = " ";

    // Determine the feedback mode
    switch (feedbackMode) {
        case app.feedbackMode.DEFAULT:
            feedbackClass += "panel-info";
            break;
        case app.feedbackMode.OK:
            feedbackClass += "panel-success";
            break;
        case app.feedbackMode.ERROR:
            feedbackClass += "panel-error";
            break;
        default:
            if (app.settings.debug) { console.log("Unknown feedback mode passed to createFeedbackDialog"); }
    }

    var feedbackControl = document.createElement("div");
    feedbackControl.className = "panel" + feedbackClass;

    // If there is a title set, append the panel header syntax
    if (title.length > 0) {

        var feedbackHeader = document.createElement("div");
        feedbackHeader.className = "panel-heading";
        feedbackHeader.innerHTML = title;

        // thisend the panel header to the feedback control
        feedbackControl.appendChild(feedbackHeader);
    }

    if (message.length > 0) {

        var feedbackBody = document.createElement("div");
        feedbackBody.className = "panel-body";
        feedbackBody.innerHTML = message;

        // Append the panel body to the feedback control
        feedbackControl.appendChild(feedbackBody);
    }

    // Insert the feedback element
    if (beforeElement)
        beforeElement.insertBefore(feedbackControl, beforeElement.firstChild);
    else
        document.body.insertBefore(feedbackControl, document.body.firstChild);

    // Delete the feedback control after N seconds (if set to greater than 0)
    if (app.settings.feedbackTimer > 0)
        setTimeout(function() {
            feedbackControl.parentNode.removeChild(feedbackControl);
        }, 1000 * app.settings.feedbackTimer);
}

app.showControl = function(elem) {
    elem.style.display = "";
}

app.hideControl = function(elem) {
    elem.style.display = "none";
}
